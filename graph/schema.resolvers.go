package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"github.com/kaitsubaka/clubhub_franchises/graph/model"
	"github.com/kaitsubaka/clubhub_franchises/internal/core/dto"
)

// CreateFranchise is the resolver for the createFranchise field.
func (r *mutationResolver) CreateFranchise(ctx context.Context, input model.CreateFranchiseInput) (*model.CreatedFranchise, error) {
	f, err := r.pendingFranchizeUseCase.Create(dto.CreateNewFranchizeDTO{
		URL: input.URL,
	})
	if err != nil {
		return nil, err
	}
	return &model.CreatedFranchise{
		ID:  f.ID,
		URL: f.URL,
	}, nil
}

// UpdateFranchise is the resolver for the updateFranchise field.
func (r *mutationResolver) UpdateFranchise(ctx context.Context, input model.UpdateFranchiseInput) (*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: UpdateFranchise - updateFranchise"))
}

// FindFranchises is the resolver for the findFranchises field.
func (r *queryResolver) FindFranchises(ctx context.Context, criteria *model.FindFranchisesCriteria) ([]*model.Franchise, error) {
	panic(fmt.Errorf("not implemented: FindFranchises - findFranchises"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
