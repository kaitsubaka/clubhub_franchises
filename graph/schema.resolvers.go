package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/kaitsubaka/clubhub_franchises/graph/model"
	"github.com/kaitsubaka/clubhub_franchises/internal/core/dto"
)

// CreateFranchise is the resolver for the createFranchise field.
func (r *mutationResolver) CreateFranchise(ctx context.Context, input model.CreateFranchiseInput) (*model.CreatedFranchise, error) {
	f, err := r.pendingFranchizeUseCase.Create(dto.CreateNewFranchizeDTO{
		URL: input.URL,
	})
	if err != nil {
		return nil, err
	}
	return &model.CreatedFranchise{
		ID:  f.ID,
		URL: f.URL,
	}, nil
}

// UpdateFranchise is the resolver for the updateFranchise field.
func (r *mutationResolver) UpdateFranchise(ctx context.Context, input model.UpdateFranchiseInput) (*model.Franchise, error) {
	updatedFranchiseDTO, err := r.franchiseUseCase.Update(dto.UpdateFranchiseDTO{
		ID:       input.ID,
		Title:    input.Title,
		SiteName: input.Name,
		Location: func() *dto.UpdateLocationDTO {
			if input.Location != nil {
				return &dto.UpdateLocationDTO{
					Address: input.Location.Adress,
					ZipCode: input.Location.ZipCode,
					City:    input.Location.City,
					Country: input.Location.Country,
				}
			}
			return nil
		}(),
	})
	if err != nil {
		return nil, err
	}
	return &model.Franchise{
		ID:    updatedFranchiseDTO.ID,
		Title: updatedFranchiseDTO.Title,
		Name:  updatedFranchiseDTO.SiteName,
		URL:   updatedFranchiseDTO.URL,
		Location: &model.Location{
			Adress:  updatedFranchiseDTO.Location.Address,
			City:    updatedFranchiseDTO.Location.City,
			Country: updatedFranchiseDTO.Location.Country,
			ZipCode: updatedFranchiseDTO.Location.ZipCode,
		},
	}, nil
}

// FindFranchises is the resolver for the findFranchises field.
func (r *queryResolver) FindFranchises(ctx context.Context, criteria *model.FindFranchisesCriteria) ([]*model.Franchise, error) {
	franchises, err := r.franchiseUseCase.GetAll(dto.ConsultFranchiseCriterialDTO{
		FranchiseName: criteria.Name,
		CompanyName:   criteria.Company,
		Country:       criteria.Country,
		City:          criteria.City,
	})
	if err != nil {
		return nil, err
	}
	response := make([]*model.Franchise, 0, len(franchises))
	for _, f := range franchises {
		response = append(response, &model.Franchise{
			ID:    f.ID,
			Title: f.Title,
			Name:  f.SiteName,
			URL:   f.URL,
			Location: &model.Location{
				Adress:  f.Address,
				City:    f.City,
				Country: f.Country,
				ZipCode: f.ZipCode,
			},
		})
	}
	return response, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
